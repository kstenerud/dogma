dogma_v1 utf-8
- identifier  = ico
- description = Microsoft ICO icon file format
- reference   = https://learn.microsoft.com/en-us/previous-versions/ms997538(v=msdn.10)
- dogma       = https://github.com/kstenerud/dogma/blob/master/v1/dogma_v1.md

document       = byte_order(lsb, document_le);

document_le    = var(head,header)
               & icon_dir_entry{head.count}
               ;

header         = u16(0)
               & u16(1)
               & u16(var(count,~))
               ;

icon_dir_entry = width
               & height
               & color_count
               & u8(0)
               & color_planes
               & bits_per_pixel
               & u32(var(byte_count,~))
               & u32(var(image_offset,~))
               & offset(image_offset*8, image)
               ;
width          = u8(~);
height         = u8(~);
color_count    = u8(~);
color_planes   = u16(~);
bits_per_pixel = u16(~);

image          = var(info, bitmap_info)
               & [
                   info.bit_count = 1: rgb_quad{2};
                   info.bit_count = 4: rgb_quad{16};
                   info.bit_count = 8: rgb_quad{256};
                 ]
               & xor_data(info.width, info.height/2, info.bit_count)
               & and_data(info.width, info.height/2)
               ;

bitmap_info    = u32(var(size,~))
               & u32(var(width,~))
               & s32(var(height,~)) # Note: Can be negative!
               & u16(var(planes,~))
               & u16(var(bit_count, 1 | 4 | 8 | 16 | 24 | 32))
               & u32(0) # biCompression
               & u32(var(size_image,~))
               & u32(0) # biXPelsPerMeter
               & u32(0) # biYPelsPerMeter
               & u32(0) # biClrUsed
               & u32(0) # biClrImportant
               ;

rgb_quad       = blue
               & green
               & red
               & u8(0)
               ;
blue           = u8(~);
green          = u8(~);
red            = u8(~);

u8(values)     = uint(8,values);
u16(values)    = ordered(uint(16,values);
u32(values)    = ordered(uint(32,values);
s32(values)    = ordered(sint(32,values);

xor_data(width, height, bpp) = uint(bpp,~){width*height};
and_data(width, height)      = uint(1,~){width*height};
