dogma_v1 utf-8
- identifier          = ico
- description         = Microsoft ICO icon file format
- dogma_specification = https://github.com/kstenerud/dogma/blob/master/dogma_v1.md

document       = byte_order(lsb, document_le);

document_le    = var(head,header)
               & icon_dir_entry{head.count}
               ;

header         = uint(16,0)
               & uint(16,1)
               & uint(16,var(count,~))
               ;

icon_dir_entry = width
               & height
               & color_count
               & uint(8,0)
               & color_planes
               & bits_per_pixel
               & uint(32,var(byte_count,~))
               & uint(32,var(image_offset,~))
               & offset(image_offset, image)
               ;
width          = uint(8,~);
height         = uint(8,~);
color_count    = uint(8,~);
color_planes   = uint(16,~);
bits_per_pixel = uint(16,~);

image          = var(info, bitmap_info)
               & [
                   info.bit_count = 1: rgb_quad{2};
                   info.bit_count = 4: rgb_quad{16};
                   info.bit_count = 8: rgb_quad{256};
                 ]
               & xor_data(info.width, info.height/2, info.bit_count)
               & and_data(info.width, info.height/2)
               ;

bitmap_info    = uint(32,var(size,~))
               & uint(32,var(width,~))
               & sint(32,var(height,~)) # Note: Can be negative!
               & uint(16,var(planes,~))
               & uint(16,var(bit_count, 1 | 4 | 8 | 16 | 24 | 32))
               & uint(32,0) # biCompression
               & uint(32,var(size_image,~))
               & uint(32,0) # biXPelsPerMeter
               & uint(32,0) # biYPelsPerMeter
               & uint(32,0) # biClrUsed
               & uint(32,0) # biClrImportant
               ;

rgb_quad       = blue
               & green
               & red
               & uint(8,0)
               ;
blue           = uint(8,~);
green          = uint(8,~);
red            = uint(8,~);

xor_data(width, height, bpp) = uint(bpp,~){width*height};
and_data(width, height)      = uint(1,~){width*height};
